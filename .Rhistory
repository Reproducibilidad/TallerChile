str(new)
?read.csv
rep("ordered",4)
?ordered
new=read.csv("indexes.csv",
colClasses = c("character","numeric",rep("ordered",4)))
new=read.csv("indexes.csv",
colClasses = c("character","numeric",rep("factor",4)))
str(new)
max(new$EconomicFreedom)
new2=read_dta("indexes.dta")
str(new2)
head(new2)
max(new2$WorldFreedom)
median(new2$WorldFreedom)
str(new2)
is.ordered(new2$WorldFreedom)
is.factor(new2$WorldFreedom)
attributes(new2$WorldFreedom)
attributes(new2$WorldFreedom)$labels
install.packages("readstata13")
library(readstata13)
dat <- read.dta13(system.file("indexes.dta", package="readstata13"))
dat <- read.dta13("indexes.dta")
labname <- get.label.name(dat,"type")
get.label(dat, labname)
labname
dat
str(dat)
max(dat$WorldFreedom)
detach("package:readstata13", unload=TRUE)
attr(new2$WorldFreedom, "label") )
attr(new2$WorldFreedom, "label")
new2=read_dta("indexes.dta")
str(new2)
head(new2)
attributes(new2$WorldFreedom)$labels
attr(new2$WorldFreedom, "label")
max(factor(1,2,3,4))
max(ordered(1,2,3,4))
str(new2$WorldFreedom)
str(new2$WorldFreedom)$names
attr(new2$WorldFreedom, "names")
new2=read_dta("indexes.dta")
str(new2)
head(new2)
max(new2$WorldFreedom)
attr(new2$WorldFreedom, "names")
str(new2$WorldFreedom)$names
attr(new2$WorldFreedom)$names
attr(new2$WorldFreedom, "labels")
attr(new2$WorldFreedom, "names")
setwd("~/Documents/GITHUBs/ReproTaller/TallerChile")
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = FALSE)
# ver primeras filas los datos:
head(dataidx)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = FALSE)
# ver primeras filas los datos:
head(dataidx)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = FALSE)
# ver primeras filas los datos:
head(dataidx)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = FALSE)
# ver primeras filas los datos:
head(dataidx)
demoTable=table(dataidx[,5])
demoTable
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = FALSE)
# ver primeras filas los datos:
head(dataidx)
demoTable=table(dataidx[,5])
demoTable
demoTable=table(dataidx[,5])
names(demoTable)=level4
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTable=table(dataidx[,3])
names(ecoTable)=level5
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = FALSE)
# ver primeras filas los datos:
head(dataidx)
demoTable=table(dataidx[,5])
demoTable
demoTable=table(dataidx[,5])
demoTable
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTable=table(dataidx[,3])
ecoTable
ecoTable=table(dataidx[,3])
ecoTable
ecoTableRel=round(prop.table(ecoTable)*100,1)
ecoTableRel
ecoTableRel=round(prop.table(ecoTable)*100,1)
ecoTableRel
title='Distribución de la Libertad Económica'
paleta='red'
barplot(ecoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
worldTable=table(dataidx[,2])
worldTable
worldTable=table(dataidx[,2])
worldTable
demoTable=table(dataidx$Democracy)
demoTable
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTable=table(dataidx$EconomicFreedom)
ecoTable
ecoTableRel=round(prop.table(ecoTable)*100,1)
ecoTableRel
title='Distribución de la Libertad Económica'
paleta='red'
barplot(ecoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
worldTable=table(dataidx$WorldFreedom)
worldTable
worldTableRel=round(prop.table(worldTable)*100,1)
worldTableRel
worldTableRel=round(prop.table(worldTable)*100,1)
worldTableRel
title='Distribución de la Libertad en el Mundo'
paleta='red'
barplot(worldTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
pressTable=table(dataidx$PressFreedom)
pressTable
pressTableRel=round(prop.table(pressTable)*100,1)
pressTableRel
pressTableRel=round(prop.table(pressTable)*100,1)
pressTableRel
title='Distribución de la Libertad de Prensa'
paleta='red'
barplot(pressTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
summary(dataidx[,-1])
summary(dataidx[,-1])
summary(dataidx$WorldFreedom)
summary(as.numeric(dataidx$WorldFreedom))
summary(dataidx$)
summary(dataidx)
summary(as.factor(dataidx$WorldFreedom))
summary(as.numeric(as.factor(dataidx$WorldFreedom)))
summary(as.factor(dataidx$WorldFreedom))
summary(dataidx)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = FALSE)
# ver primeras filas los datos:
head(dataidx)
demoTable=table(dataidx$Democracy)
demoTable
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTable=table(dataidx$EconomicFreedom)
ecoTable
ecoTableRel=round(prop.table(ecoTable)*100,1)
ecoTableRel
title='Distribución de la Libertad Económica'
paleta='red'
barplot(ecoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
worldTable=table(dataidx$WorldFreedom)
worldTable
worldTableRel=round(prop.table(worldTable)*100,1)
worldTableRel
title='Distribución de la Libertad en el Mundo'
paleta='red'
barplot(worldTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
pressTable=table(dataidx$PressFreedom)
pressTable
pressTableRel=round(prop.table(pressTable)*100,1)
pressTableRel
title='Distribución de la Libertad de Prensa'
paleta='red'
barplot(pressTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
summary(dataidx)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = T)
# ver primeras filas los datos:
head(dataidx)
demoTable=table(dataidx$Democracy)
demoTable
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTable=table(dataidx$EconomicFreedom)
ecoTable
ecoTableRel=round(prop.table(ecoTable)*100,1)
ecoTableRel
title='Distribución de la Libertad Económica'
paleta='red'
barplot(ecoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
worldTable=table(dataidx$WorldFreedom)
worldTable
worldTableRel=round(prop.table(worldTable)*100,1)
worldTableRel
title='Distribución de la Libertad en el Mundo'
paleta='red'
barplot(worldTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
pressTable=table(dataidx$PressFreedom)
pressTable
pressTableRel=round(prop.table(pressTable)*100,1)
pressTableRel
title='Distribución de la Libertad de Prensa'
paleta='red'
barplot(pressTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
summary(dataidx)
explanans=names(dataidx)[c(3:6)]
corrDem=cor(x=dataidx[,2],
y=dataidx[,explanans],
use = "na.or.complete",
method = "spearman")
corrDem
corrTable=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
# ocultar media matriz
corrTable[upper.tri(corrTable)]<-""
as.data.frame(corrTable)
corrTable=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
# ocultar media matriz
corrTable[upper.tri(corrTable)]<-""
as.data.frame(corrTable)
LinRegA = lm(gdp ~ ., data = dataidx[,c(3:5)])
LinRegA = lm(gdp ~ ., data = dataidx[,c(2:5)])
summary(LinRegA)
LinRegB = lm(gdp ~ ., data = dataidx[,c(2:6)])
summary(LinRegB)
library(rgdal)
folder='world_map'
file='world_map.shp'
mapaFile=file.path(folder,file)
mapaMundo = rgdal::readOGR(mapaFile,stringsAsFactors=F)
plot(mapaMundo)
head(mapaMundo@data)
# añadiendo información de indices al mapa:
mapaMundoAll=merge(mapaMundo,
dataidx,
by.x='NAME',
by.y='Country',all.x=F)
names(dataidx)[c(3:6)]
# nombres de las variables a utilizar
dimensions=names(dataidx)[c(3:6)]
#creando subconjunto
dataCluster=mapaMundoAll@data[,c(dimensions)]
dataCluster
# indicando que la data numerica es ordinal:
dataCluster=as.data.frame(lapply(dataCluster,as.ordered))
dataCluster
# llamando librería:
library(cluster)
# creando matriz de distancias
dist=daisy(dataCluster,metric = "gower")
# aplicando algoritmo
pam_fit <- pam(dist, diss = TRUE, k = 3)
# añadiendo los clusters al mapa:
mapaMundoAll$cluster=pam_fit$clustering
aggregate(Democracy~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
aggregate(DemocracyIndex~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
aggregate(gdp~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
aggregate(DemocracyIndex~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
aggregate(.~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
aggregate(DemocracyIndex~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
aggregate(IndexofEconomicFreedom~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
library(car)
mapaMundoAll$cluster<-recode(mapaMundoAll$cluster,
"1=1;2=3;3=2")
# que se pintara:
varToPlot=mapaMundoAll$cluster
#cuantos colores:
numberOfColors = length(unique(varToPlot))
#qué colores:
library(RColorBrewer)
colorForScale='Set2'
paleta = brewer.pal(numberOfColors, colorForScale)
# a dibujar:
plot(mapaMundo,col='grey',border=0)
plot(mapaMundoAll, col = paleta[varToPlot],border=F,add=T)
legend('left', legend = c("TOP","MEDIUM","LOW"),
fill = paleta,
cex = 0.6,
bty = "n",
title="Conglomerado")
library(rgdal)
folder='world_map'
file='world_map.shp'
mapaFile=file.path(folder,file)
mapaMundo = rgdal::readOGR(mapaFile,stringsAsFactors=F)
plot(mapaMundo)
# añadiendo información de indices al mapa:
mapaMundoAll=merge(mapaMundo,
dataidx,
by.x='NAME',
by.y='Country',all.x=F)
# nombres de las variables a utilizar
dimensions=names(dataidx)[c(3:6)]
#creando subconjunto
dataCluster=mapaMundoAll@data[,c(dimensions)]
# llamando librería:
library(cluster)
# creando matriz de distancias
dist=daisy(dataCluster,metric = "gower")
# aplicando algoritmo
pam_fit <- pam(dist, diss = TRUE, k = 3)
# añadiendo los clusters al mapa:
mapaMundoAll$cluster=pam_fit$clustering
aggregate(IndexofEconomicFreedom~cluster,
data=mapaMundoAll,
FUN=mean,
na.rm=T)
library(car)
mapaMundoAll$cluster<-recode(mapaMundoAll$cluster,
"2=3;3=2")
# que se pintara:
varToPlot=mapaMundoAll$cluster
#cuantos colores:
numberOfColors = length(unique(varToPlot))
#qué colores:
library(RColorBrewer)
colorForScale='Set2'
paleta = brewer.pal(numberOfColors, colorForScale)
# a dibujar:
plot(mapaMundo,col='grey',border=0)
plot(mapaMundoAll, col = paleta[varToPlot],border=F,add=T)
legend('left', legend = c("TOP","MEDIUM","LOW"),
fill = paleta,
cex = 0.6,
bty = "n",
title="Conglomerado")
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename,
stringsAsFactors = T)
# ver primeras filas los datos:
head(dataidx)
demoTable=table(dataidx$Democracy)
demoTable
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = T)
demoTable=table(dataidx$Democracy)
demoTable
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTable=table(dataidx$EconomicFreedom)
ecoTable
worldTable=table(dataidx$WorldFreedom)
worldTable
pressTable=table(dataidx$PressFreedom)
pressTable
summary(dataidx[,-1])
summary(dataidx[,-1])
explanans=names(dataidx)[c(3:6)]
corrDem=cor(x=dataidx[,2],
y=dataidx[,explanans],
use = "na.or.complete",
method = "spearman")
corrDem
corrTable=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
# ocultar media matriz
corrTable[upper.tri(corrTable)]<-""
as.data.frame(corrTable)
LinRegA = lm(gdp ~ ., data = dataidx[,c(2:5)])
summary(LinRegA)
LinRegB = lm(gdp ~ ., data = dataidx[,c(2:6)])
summary(LinRegB)
LinRegA = lm(gdp ~ ., data = dataidx[,c(2:5)])
summary(LinRegA)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = T)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = T)
View(dataidx)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = T)
library(stargazer)
vars1 <- dataidx[, c(2)]
stargazer(vars1,title = "Medidas estadísticas",summary.stat = c("n", "mean"))
View(dataidx)
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = T)
library(reporttools)
library(xtable)
titulo <- "Tablas de Frecuencia de la variables en estudio"
tableNominal(vars = dataidx[, c(7:10)],
cap = titulo, vertical = FALSE,
caption.placement = "top",
add.to.row = list(pos = list(0),
command = "\\hline"))
head(dataidx)
vars1
stargazer(vars1,title = "Medidas estadísticas",summary.stat = c("n", "mean"))
vars2 <- dataidx[, c(3:6)]
stargazer(vars2,title = "Medidas estadísticas",summary.stat = c("n", "median"))
vars1 <- dataidx[, c(2)]
stargazer(vars1,title = "Medidas estadísticas",summary.stat = c("mean"))
View(dataidx)
?stargazer
stargazer(vars1,title = "Medidas estadísticas",summary=T,summary.stat = c("mean"))
vars1 <- dataidx$gdp
stargazer(vars1,title = "Medidas estadísticas",summary=T,summary.stat = c("mean"))
vars1 <- dataidx[,"gdp"]
vars1
stargazer(vars1,title = "Medidas estadísticas",summary=T,summary.stat = c("mean"))
vars1
vars2 <- dataidx[, c(2:6)]
stargazer(vars2,title = "Medidas estadísticas",summary.stat = c("n", "median","mean"))
vars1 <- dataidx[, c(2:2)]
stargazer(vars1,title = "Medidas estadísticas",summary=T,summary.stat = c("mean"))
vars1 <- dataidx[, c(1:2)]
stargazer(vars1,title = "Medidas estadísticas",summary=T,summary.stat = c("mean"))
stargazer(vars1,title = "Medidas estadísticas",summary=T,summary.stat = c("n","mean"))
####
pressTable=table(dataidx$PressFreedomIndex)
pressTableRel=round(prop.table(pressTable)*100,1)
title='Libertad de Prensa'
paleta='red'
barplot(pressTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%",las=2)
